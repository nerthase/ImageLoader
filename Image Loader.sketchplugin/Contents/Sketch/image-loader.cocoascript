@import 'libs/utils.js';

// Globals
var doc;

var sketchVersion = [[[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleShortVersionString"] floatValue];


// onRun handler
function imageLoader(context) {
	doc = context.document

	// Let user choose the Images folder
	var path = getImagesFolder()

	// Select All Pages
	var pages = getPages()

	while (page = pages.nextObject()) {
			// Populate screens
			populateScreens(path, page)
	}
}


// Ask user to select images folder
function getImagesFolder() {
  var openPanel = NSOpenPanel.openPanel( )
  openPanel.setCanChooseDirectories(true)
  openPanel.setCanChooseFiles(false)
  openPanel.setCanCreateDirectories(false)

	openPanel.setTitle("Choose your images folder")
  openPanel.setPrompt("Choose")
  if (openPanel.runModal() == NSOKButton) {
      return openPanel.URL()
  }
}

// Populate screens
function populateScreens(path, sourcesPage) {
	var fileManager = NSFileManager.defaultManager()

	// Loop through files
	var files = fileManager.shallowSubpathsOfDirectoryAtURL(path)
	for (var i = 0; i < files.count(); i++) {
		var file = files[i]
		var key = file.lastPathComponent().stringByDeletingPathExtension()

		// Get image layer
		var layers = getLayersByName(sourcesPage, key) // It returns a native JS Array :(

		for (var j = 0; j < layers.length; j++) {
			var imageLayer = layers[j]

			// Get image data
			var data = fileManager.contentsAtPath(file)
			var img = NSImage.alloc().initWithData(data)

			if (sketchVersion < 3.4) {
				// Add image to Collection
				var imageCollection = imageLayer.documentData().images()
				var imageData = [imageCollection addNSImage:img convertColourspace:false]

				// Update imageLayer with image
				imageLayer.image = imageData
			} else {
				// Update imageLayer with image
				imageLayer.image = [MSImageProxy proxyWithImage:img]
			}
		}
  }
}
